// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  password  String
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relacionamentos
  sales     Sale[]
  purchases Purchase[]
  barrelMovements BarrelMovement[]
  auditLogs AuditLog[]

  @@map("users")
}

model Product {
  id          String   @id @default(cuid())
  name        String
  description String?
  price       Decimal  @db.Decimal(10, 2)
  cost        Decimal  @db.Decimal(10, 2)
  categoryId  String
  unitId      String
  barcode     String?  @unique
  imageUrl    String?
  isActive    Boolean  @default(true)
  
  // Campos para produtos fracionados
  productType ProductType @default(UNIT)
  volumeRetiradaMl Int? // Volume em ml para produtos fracionados (300, 500, 1000)
  barrelId    String? // Referência ao barril para produtos fracionados
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relacionamentos
  category    Category @relation(fields: [categoryId], references: [id])
  unit        Unit     @relation(fields: [unitId], references: [id])
  barrel      Barrel?  @relation(fields: [barrelId], references: [id])
  inventory   Inventory?
  saleItems   SaleItem[]
  purchaseItems PurchaseItem[]
  tickets     Ticket[]

  @@map("products")
}

model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relacionamentos
  products    Product[]

  @@map("categories")
}

model Unit {
  id          String   @id @default(cuid())
  name        String   @unique
  symbol      String   @unique // un, kg, L, etc.
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relacionamentos
  products    Product[]

  @@map("units")
}

model Inventory {
  id          String   @id @default(cuid())
  productId   String   @unique
  quantity    Int      @default(0)
  minQuantity Int      @default(0)
  maxQuantity Int?
  lastUpdated DateTime @default(now())

  // Relacionamentos
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("inventory")
}

model Sale {
  id          String   @id @default(cuid())
  userId      String
  total       Decimal  @db.Decimal(10, 2)
  discount    Decimal  @db.Decimal(10, 2) @default(0)
  paymentMethod String // dinheiro, cartão, pix, etc.
  status      SaleStatus @default(COMPLETED)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relacionamentos
  user        User      @relation(fields: [userId], references: [id])
  items       SaleItem[]

  @@map("sales")
}

model SaleItem {
  id        String  @id @default(cuid())
  saleId    String
  productId String
  quantity  Int
  price     Decimal @db.Decimal(10, 2)
  subtotal  Decimal @db.Decimal(10, 2)
  
  // Volume total em ml para produtos fracionados
  volumeTotalMl Int? // quantity * volumeRetiradaMl

  // Relacionamentos
  sale      Sale    @relation(fields: [saleId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id])
  tickets   Ticket[]

  @@map("sale_items")
}

model Purchase {
  id          String   @id @default(cuid())
  userId      String
  supplier    String
  total       Decimal  @db.Decimal(10, 2)
  status      PurchaseStatus @default(PENDING)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relacionamentos
  user        User      @relation(fields: [userId], references: [id])
  items       PurchaseItem[]

  @@map("purchases")
}

model PurchaseItem {
  id        String  @id @default(cuid())
  purchaseId String
  productId String
  quantity  Int
  cost      Decimal @db.Decimal(10, 2)
  subtotal  Decimal @db.Decimal(10, 2)

  // Relacionamentos
  purchase  Purchase @relation(fields: [purchaseId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id])

  @@map("purchase_items")
}

enum Role {
  ADMIN
  USER
}

enum SaleStatus {
  PENDING
  COMPLETED
  CANCELLED
}

enum PurchaseStatus {
  PENDING
  RECEIVED
  CANCELLED
}

// Novos modelos para sistema de barril fracionado

model Barrel {
  id                String   @id @default(cuid())
  name              String   // Nome do barril (ex: "Barril Pio Sem Verasso #001")
  volumeTotalMl     Int      // Volume total em ml (ex: 50000)
  volumeDisponivelMl Int     // Volume disponível em ml
  mlResiduoMinimo   Int      @default(50) // Volume mínimo para considerar resíduo
  status            BarrelStatus @default(ACTIVE)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  closedAt          DateTime?

  // Relacionamentos
  products          Product[]
  movements         BarrelMovement[]
  tickets           Ticket[]

  @@map("barrels")
}

model BarrelMovement {
  id          String   @id @default(cuid())
  barrelId    String
  type        MovementType
  volumeMl    Int      // Volume em ml da movimentação
  reference   String?  // Referência (ex: "Sale #123", "Ajuste manual")
  userId      String?  // Usuário que fez a movimentação
  createdAt   DateTime @default(now())

  // Relacionamentos
  barrel      Barrel   @relation(fields: [barrelId], references: [id], onDelete: Cascade)
  user        User?    @relation(fields: [userId], references: [id])

  @@map("barrel_movements")
}

model Ticket {
  id            String   @id @default(cuid())
  saleItemId    String
  productId     String
  barrelId      String?
  sequence      Int      // Número sequencial da ficha (1, 2, 3...)
  totalTickets  Int      // Total de fichas para este item
  status        TicketStatus @default(PENDING)
  qrCode        String?  // Código QR único
  printedAt     DateTime?
  consumedAt    DateTime?
  createdAt     DateTime @default(now())

  // Relacionamentos
  saleItem      SaleItem @relation(fields: [saleItemId], references: [id], onDelete: Cascade)
  product       Product  @relation(fields: [productId], references: [id])
  barrel        Barrel?  @relation(fields: [barrelId], references: [id])

  @@map("tickets")
}

model AuditLog {
  id          String   @id @default(cuid())
  action      String   // Ação realizada
  entityType  String   // Tipo da entidade (Barrel, Product, Ticket, etc.)
  entityId    String   // ID da entidade
  userId      String   // Usuário que fez a ação
  details     Json?    // Detalhes da ação em JSON
  createdAt   DateTime @default(now())

  // Relacionamentos
  user        User     @relation(fields: [userId], references: [id])

  @@map("audit_logs")
}

// Enums
enum ProductType {
  UNIT        // Produto unitário (ex: cerveja individual)
  FRACTIONED  // Produto fracionado (ex: 300ml, 500ml, 1000ml)
}

enum BarrelStatus {
  ACTIVE      // Barril ativo, aceitando vendas
  CLOSED      // Barril encerrado, não aceita novas vendas
  MAINTENANCE // Barril em manutenção
}

enum MovementType {
  ENTRY       // Entrada de volume (abertura do barril)
  SALE        // Baixa por venda
  ADJUSTMENT  // Ajuste manual
  LOSS        // Perda/derramamento
  CLOSURE     // Encerramento do barril
}

enum TicketStatus {
  PENDING     // Ficha pendente de retirada
  CONSUMED    // Ficha consumida/retirada
  CANCELLED   // Ficha cancelada
}