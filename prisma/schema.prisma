// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  password  String
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relacionamentos
  sales     Sale[]
  purchases Purchase[]

  @@map("users")
}

model Product {
  id          String   @id @default(cuid())
  name        String
  description String?
  price       Decimal  @db.Decimal(10, 2)
  cost        Decimal  @db.Decimal(10, 2)
  categoryId  String
  unitId      String
  barcode     String?  @unique
  imageUrl    String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relacionamentos
  category    Category @relation(fields: [categoryId], references: [id])
  unit        Unit     @relation(fields: [unitId], references: [id])
  inventory   Inventory?
  saleItems   SaleItem[]
  purchaseItems PurchaseItem[]

  @@map("products")
}

model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relacionamentos
  products    Product[]

  @@map("categories")
}

model Unit {
  id          String   @id @default(cuid())
  name        String   @unique
  symbol      String   @unique // un, kg, L, etc.
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relacionamentos
  products    Product[]

  @@map("units")
}

model Inventory {
  id          String   @id @default(cuid())
  productId   String   @unique
  quantity    Int      @default(0)
  minQuantity Int      @default(0)
  maxQuantity Int?
  lastUpdated DateTime @default(now())

  // Relacionamentos
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("inventory")
}

model Sale {
  id          String   @id @default(cuid())
  userId      String
  total       Decimal  @db.Decimal(10, 2)
  discount    Decimal  @db.Decimal(10, 2) @default(0)
  paymentMethod String // dinheiro, cart√£o, pix, etc.
  status      SaleStatus @default(COMPLETED)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relacionamentos
  user        User      @relation(fields: [userId], references: [id])
  items       SaleItem[]

  @@map("sales")
}

model SaleItem {
  id        String  @id @default(cuid())
  saleId    String
  productId String
  quantity  Int
  price     Decimal @db.Decimal(10, 2)
  subtotal  Decimal @db.Decimal(10, 2)

  // Relacionamentos
  sale      Sale    @relation(fields: [saleId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id])

  @@map("sale_items")
}

model Purchase {
  id          String   @id @default(cuid())
  userId      String
  supplier    String
  total       Decimal  @db.Decimal(10, 2)
  status      PurchaseStatus @default(PENDING)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relacionamentos
  user        User      @relation(fields: [userId], references: [id])
  items       PurchaseItem[]

  @@map("purchases")
}

model PurchaseItem {
  id        String  @id @default(cuid())
  purchaseId String
  productId String
  quantity  Int
  cost      Decimal @db.Decimal(10, 2)
  subtotal  Decimal @db.Decimal(10, 2)

  // Relacionamentos
  purchase  Purchase @relation(fields: [purchaseId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id])

  @@map("purchase_items")
}

enum Role {
  ADMIN
  USER
}

enum SaleStatus {
  PENDING
  COMPLETED
  CANCELLED
}

enum PurchaseStatus {
  PENDING
  RECEIVED
  CANCELLED
}